"""
Stubs para psycopg y psycopg2 para mejorar el soporte de tipos.
Este archivo ayuda a pyright a entender las importaciones condicionales.
"""

from typing import Any, Optional, Union, Dict, List, Tuple
from contextlib import contextmanager

# Stubs para psycopg3
class PsycopgConnection:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def cursor(self) -> 'PsycopgCursor': ...
    def close(self) -> None: ...
    def __enter__(self) -> 'PsycopgConnection': ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...

class PsycopgCursor:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def execute(self, query: str, params: Optional[Tuple[Any, ...]] = None) -> None: ...
    def fetchone(self) -> Optional[Tuple[Any, ...]]: ...
    def fetchall(self) -> List[Tuple[Any, ...]]: ...
    def close(self) -> None: ...
    def __enter__(self) -> 'PsycopgCursor': ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...

def connect(conninfo: str, **kwargs: Any) -> PsycopgConnection: ...

# Stubs para psycopg2
class Psycopg2Connection:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def cursor(self) -> 'Psycopg2Cursor': ...
    def close(self) -> None: ...
    def set_isolation_level(self, level: int) -> None: ...

class Psycopg2Cursor:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def execute(self, query: str, params: Optional[Tuple[Any, ...]] = None) -> None: ...
    def fetchone(self) -> Optional[Tuple[Any, ...]]: ...
    def fetchall(self) -> List[Tuple[Any, ...]]: ...
    def close(self) -> None: ...

# Constantes
ISOLATION_LEVEL_AUTOCOMMIT: int = 0

# Variables globales para importaciones condicionales
psycopg: Any = None
psycopg2: Any = None

